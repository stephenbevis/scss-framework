@import './global-variables.scss';

*{
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    font-family: $global-font;
}

h1, .h1{
    font-size: 2rem;
}

h2, .h2{
    font-size: 1.75rem;
}

h3, .h3{
    font-size: 1.50rem;
}

h4, .h4{
    font-size: 1.25rem;
}

h5, .h5{
    font-size: 1rem;
}

h6, .h6{
    font-size: .75rem;
}

p, .p{
    font-family: $global-font;
}

input{
    padding: 10px;
    width: 100%;
    display: block;
    border-radius: 0px;
    border: 1px solid $light;
    outline: none;
    color: $dark;
}

.profile-mini-input{
    position: absolute;
    top: 5px;
    right: -100px;
    width: 100px;
    transition: right .5s;
    z-index: 10;
}

.profile-mini:hover{
    .profile-mini-input{
        right: 5px;
    }
}

// Colors
$colors: (
    primary: $primary,
    primary-2: $primary-2,
    success: $success,
    success-2: $success-2,
    info: $info,
    info-2: $info-2,
    warning: $warning,
    warning-2: $warning-2,
    danger: $danger,
    danger-2: $danger-2,
    light: $light,
    light-2: $light-2,
    dark: $dark,
    dark-2: $dark-2,
    white: $white,
    white-2: $white-2,
    transparent: $transparent
);

// Screen Width Breakpoints
$breakpoints: (
    xs: $xs,
    sm: $sm,
    md: $md,
    lg: $lg,
    xl: $xl
);

// Sides
$sides: (
    t:'top',
    b:'bottom',
    l:'left',
    r:'right'
);

// Browser Prefixes
$browser-prefixes: (
    firefox: moz,
    safari: webkit,
    ie: ms
);

// Floats
$floats: (
    left,
    right,
    none
);

// Display
$displays: (
    none,
    block,
    inline,
    inline-block,
    flex,
    inline-flex
);

// Positions\
$positions: (
    static,
    relative,
    absolute,
    fixed,
    sticky
);

// Container
.container{
    width: 90%;
    max-width: $xl + px;
    margin: 0 auto;
}

// Rounded Classes
.rounded{
    border-radius: 1rem;
}

// Pointer
.pointer:hover{
    cursor: pointer;
}

// Sticky Positions
.sticky-top{
    position: sticky;
    top: 0;
}

// Widths & Heights (Start)

.w-100{
    width: 100%;
}

.w-75{
    width: 75%;
}

.w-50{
    width: 50%;
}

.w-25{
    width: 25%;
}

.h-100{
    height: 100%;
}

.h-75{
    height: 75%;
}

.h-50{
    height: 50%;
}

.h-25{
    height: 25%;
}

// Widths & Heights (End)

// Positions
.position-relative{
    position: relative;
}

.position-absolute{
    position: absolute;
}

// Overflow
.overflow-hidden{
    overflow: hidden;
}

// Buttons (Start)

.btn{
    padding: 1rem;
    border: none;
    color: white;

    @each $color, $color-value in $colors{
        &.btn-#{$color}{
            background: $color-value;
            transition: background-color .2s;

            &:hover{
                cursor: pointer;
                background: darken($color-value, 10%);
                
            }
        }
    }
}

// Buttons (End)

@each $breakpoint, $value in $breakpoints {
    @if $breakpoint == xs {
        @media screen and (max-width: $value) {
            
        }
    } @else if $breakpoint == sm {   
        @media screen and (min-width: $value) {
            .container{
                width: 80%;
            }
        }
    } @else if $breakpoint == md {   
        @media screen and (min-width: $value) {
            .container{
                width: 80%;
            }
        }
    } @else {
        @media screen and (min-width: $value) {
            .container{
                width: 70%;
            }
        }
    }
}

// Flex/Grid Sub Classes (Start)

.align-items-center{
    align-items: center;
}

.justify-content-center{
    justify-content: center;
}

.space-around{
    justify-content: space-around;
}

.space-between{
    justify-content: space-between;
}

.space-evenly{
    justify-content: space-evenly;
}

// Flex/Grid Sub Classes (End)

// Text

.text-right{
    text-align: right;
}

.text-center{
    text-align: center;
}

.text-decoration-none{
    text-decoration: none;
}

// Flex

.grid > .align-items-center{
    align-items: center;
}

// Grid System (Start)

$grid-size-max: 12;
$grid-sizes: ();

@for $i from 1 through $grid-size-max {
    $grid-sizes: append($grid-sizes, $i, comma);
}

.grid{
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
    
    @each $grid-size in $grid-sizes {
        &.columns-#{$grid-size}{
            grid-template-columns: repeat($grid-size, 1fr) !important;
        }

        & > .column-#{$grid-size}{
            grid-column: span $grid-size;
        }

        @each $breakpoint, $value in $breakpoints {
            @if $breakpoint == xs {
                @media screen and (max-width: $value) {
                    &.columns-#{$breakpoint}-#{$grid-size}{
                        grid-template-columns: repeat($grid-size, 1fr) !important;
                    }

                    & > .column-#{$breakpoint}-#{$grid-size}{
                        grid-column: span $grid-size;
                    }
                }
            } @else {   
                @media screen and (min-width: $value) {
                    &{
                        grid-template-columns: repeat(12, 1fr);
                        gap: 3rem;
                    }

                    &.columns-#{$breakpoint}-#{$grid-size}{
                        grid-template-columns: repeat($grid-size, 1fr) !important;
                    }

                    & > .column-#{$breakpoint}-#{$grid-size}{
                        grid-column: span $grid-size;
                    }
                }
            }
        }
    }
}

// Grid System (End)

// Padding & Margin

$pm-max: 10;
$pm-sizes: ();

@for $i from 0 through $pm-max {
    $pm-sizes: append($pm-sizes, $i, comma);
}

@each $side-class, $side in $sides {
    @each $size in $pm-sizes {
        // Margin
        .m-#{$size}{
            margin: $size * 10 + px;
        }

        .m#{$side-class}-#{$size}{
            margin-#{$side}: $size * 10 + px;
        }

        .my-#{$size}{
            margin-top: $size * 10 + px;
            margin-bottom: $size * 10 + px;
        }

        .mx-#{$size}{
            margin-left: $size * 10 + px;
            margin-right: $size * 10 + px;
        }

        // Padding
        .p-#{$size}{
            padding: $size * 10 + px;
        }

        .p#{$side-class}-#{$size}{
            padding-#{$side}: $size * 10 + px;
        }

        .py-#{$size}{
            padding-top: $size * 10 + px;
            padding-bottom: $size * 10 + px;
        }

        .px-#{$size}{
            padding-left: $size * 10 + px;
            padding-right: $size * 10 + px;
        }

        @each $breakpoint, $breakpoint-value in $breakpoints {
            @if $breakpoint == xs {
                @media screen and (max-width: ($breakpoint-value + px)) {
                    .m#{$side-class}-#{$breakpoint}-#{$size}{
                        margin-#{$side}: $size * 10 + px;
                    }
            
                    .my-#{$breakpoint}-#{$size}{
                        margin-top: $size * 10 + px;
                        margin-bottom: $size * 10 + px;
                    }
            
                    .mx-#{$breakpoint}-#{$size}{
                        margin-left: $size * 10 + px;
                        margin-right: $size * 10 + px;
                    }

                    .p#{$side-class}-#{$breakpoint}-#{$size}{
                        padding-#{$side}: $size * 10 + px;
                    }
            
                    .py-#{$breakpoint}-#{$size}{
                        padding-top: $size * 10 + px;
                        padding-bottom: $size * 10 + px;
                    }
            
                    .px-#{$breakpoint}-#{$size}{
                        padding-left: $size * 10 + px;
                        padding-right: $size * 10 + px;
                    }
                }
            } @else {
                @media screen and (min-width: ($breakpoint-value + px)) {
                    .m#{$side-class}-#{$breakpoint}-#{$size}{
                        margin-#{$side}: $size * 10 + px;
                    }
            
                    .my-#{$breakpoint}-#{$size}{
                        margin-top: $size * 10 + px;
                        margin-bottom: $size * 10 + px;
                    }
            
                    .mx-#{$breakpoint}-#{$size}{
                        margin-left: $size * 10 + px;
                        margin-right: $size * 10 + px;
                    }

                    .p#{$side-class}-#{$breakpoint}-#{$size}{
                        padding-#{$side}: $size * 10 + px;
                    }
            
                    .py-#{$breakpoint}-#{$size}{
                        padding-top: $size * 10 + px;
                        padding-bottom: $size * 10 + px;
                    }
            
                    .px-#{$breakpoint}-#{$size}{
                        padding-left: $size * 10 + px;
                        padding-right: $size * 10 + px;
                    }
                }
            }
        }
    }
}

@each $color, $color-value in $colors{
    // Text
    .text-#{$color}{
        color: $color-value;
    }

    // Backgrounds
    .bg-#{$color}{
        background: $color-value;
    }

    // Alerts
    .alert-#{$color}{
        padding: 10px;
        border: 1px solid $color-value;
        border-left: 5px solid $color-value;
    }

    // Standouts
    .standout-#{$color}{
        padding: 10px;
        border-left: 5px solid $color-value;
    }

    // Borders
    $border-max: 10;
    $border-sizes: ();

    @for $i from 0 through $border-max {
        $border-sizes: append($border-sizes, $i, comma);
    }

    .border{
        border: 1px solid $light;
    }

    .border-#{$color}{
        border: 1px solid $color-value;
    }

    @each $side-class, $side in $sides {
        .border-#{$side}{
            border-#{$side}: 1px solid $light;
        }

        .border-#{$color}-#{$side}{
            border-#{$side}: 1px solid $color-value;
        }

        @each $border-size in $border-sizes{

            .border-#{$border-size}-#{$color}{
                border: ($border-size + px) solid $color-value;
            }

            .border-#{$border-size}-#{$color}-#{$side}{
                border-#{$side}: ($border-size + px) solid $color-value;
            }

            @each $breakpoint, $breakpoint-value in $breakpoints {
                @if $breakpoint == xs {
                    @media screen and (max-width: ($breakpoint-value + px)) {
                        .border-#{$breakpoint}-#{$color}{
                            border: 1px solid $color-value;
                        }

                        .border-#{$breakpoint}-#{$color}-#{$side}{
                            border-#{$side}: 1px solid $color-value;
                        }

                        .border-#{$breakpoint}-#{$border-size}-#{$color}{
                            border: ($border-size + px) solid $color-value;
                        }
            
                        .border-#{$breakpoint}-#{$border-size}-#{$color}-#{$side}{
                            border-#{$side}: ($border-size + px) solid $color-value;
                        }
                    }
                } @else {
                    @media screen and (min-width: ($breakpoint-value + px)) {
                        .border-#{$breakpoint}-#{$color}{
                            border: 1px solid $color-value;
                        }

                        .border-#{$breakpoint}-#{$color}-#{$side}{
                            border-#{$side}: 1px solid $color-value;
                        }

                        .border-#{$breakpoint}-#{$border-size}-#{$color}{
                            border: ($border-size + px) solid $color-value;
                        }
            
                        .border-#{$breakpoint}-#{$border-size}-#{$color}-#{$side}{
                            border-#{$side}: ($border-size + px) solid $color-value;
                        }
                    }
                }
            }
        }
    }
}

@each $display in $displays {
    .d-#{$display}{
        display: $display !important;
    }

    @each $breakpoint, $value in $breakpoints {
        @if $breakpoint == xs {
            @media screen and (max-width: ($value + px)) {
                .d-#{$breakpoint}-#{$display}{
                    display: $display !important;
                }
            }
        } @else {
            @media screen and (min-width: ($value + px)) {
                .d-#{$breakpoint}-#{$display}{
                    display: $display !important;
                }
            }
        }
    }
}